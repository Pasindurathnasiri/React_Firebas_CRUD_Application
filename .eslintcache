[{"E:\\Tutorials\\React_App\\firebase_crud\\src\\index.js":"1","E:\\Tutorials\\React_App\\firebase_crud\\src\\App.js":"2","E:\\Tutorials\\React_App\\firebase_crud\\src\\reportWebVitals.js":"3","E:\\Tutorials\\React_App\\firebase_crud\\src\\components\\Contacts.js":"4","E:\\Tutorials\\React_App\\firebase_crud\\src\\components\\ContactForm.js":"5","E:\\Tutorials\\React_App\\firebase_crud\\src\\firebase.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":271,"mtime":1612292035916,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":4006,"mtime":1612359164593,"results":"11","hashOfConfig":"8"},{"size":3042,"mtime":1612357640769,"results":"12","hashOfConfig":"8"},{"size":566,"mtime":1612328137414,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"12sg2n9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Tutorials\\React_App\\firebase_crud\\src\\index.js",[],["29","30"],"E:\\Tutorials\\React_App\\firebase_crud\\src\\App.js",["31"],"import logo from './logo.svg';\nimport './App.css';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 offset-md-1\">\n        <Contacts/> \n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Tutorials\\React_App\\firebase_crud\\src\\reportWebVitals.js",[],"E:\\Tutorials\\React_App\\firebase_crud\\src\\components\\Contacts.js",["32","33","34"],"import React,{useState,useEffect} from \"react\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport firebaseDb from \"../firebase\";\r\n\r\nconst Contacts = () => {\r\n\r\n    var [contactObjects,setcontactObjects] = useState({});\r\n    var [currentId,setCurrentId] = useState('')\r\n\r\n\r\n    useEffect(()=>{\r\n        firebaseDb.child('contacts').on('value',snapshot=>{\r\n           if(snapshot.val()!=null)\r\n           setcontactObjects({\r\n               ...snapshot.val()\r\n           }) \r\n        })\r\n    },[])\r\n\r\n\r\n    const addOrEdit = obj =>{\r\n        if(currentId=='')\r\n        firebaseDb.child('contacts').push(\r\n            obj,\r\n            err=>{\r\n                if(err){\r\n                    console.log(err);\r\n                }else{\r\n                    setCurrentId('')\r\n                }\r\n                   \r\n            }\r\n            \r\n        )\r\n        else\r\n        firebaseDb.child(`contacts/${currentId}`).set(\r\n            obj,\r\n            err=>{\r\n                if(err){\r\n                    console.log(err);\r\n                }else{\r\n                    setCurrentId('')\r\n                }\r\n       \r\n            }\r\n            \r\n        )\r\n\r\n    }\r\n\r\n    // delete function\r\n    const onDelete = key=>{\r\n        if(window.confirm('Are you sure Do you want to Delete this contact?')){\r\n            firebaseDb.child(`contacts/${key}`).remove(\r\n                err=>{\r\n                    if(err){\r\n                        console.log(err);\r\n                    }else{\r\n                        setCurrentId('')\r\n                    }\r\n           \r\n                }\r\n                \r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    return ( \r\n        <React.Fragment>\r\n        <div className=\"content\">\r\n            <div className=\"title\">\r\n                <h1>Contacts</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-5\">\r\n                    <ContactForm {...({addOrEdit,currentId,contactObjects})} />\r\n\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                    <table className=\"table table-borderless table-stripped\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th>Full Name</th>\r\n                                <th>Mobile</th>\r\n                                <th>Email</th>\r\n                                {/* <th>Address</th> */}\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                Object.keys(contactObjects).map(id=>{\r\n                                    return <tr key={id}>\r\n                                        <td>{contactObjects[id].fullName}</td>\r\n                                        <td>{contactObjects[id].mobile}</td>\r\n                                        <td>{contactObjects[id].email}</td>\r\n                                        {/* <td>{contactObjects[id].address}</td> */}\r\n                                        <td>\r\n                                            <a className=\"btn text-primary\" onClick={()=>{setCurrentId(id)}}>\r\n                                                <i className=\"fas fa-pencil-alt\"></i>\r\n                                            </a>\r\n                                            <a className=\"btn text-danger\" onClick={()=>{onDelete(id)}}>\r\n                                                <i className=\"far fa-trash-alt\"></i>\r\n                                            </a>\r\n                                            \r\n                                        </td>\r\n                                    </tr>\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n        \r\n        </React.Fragment>\r\n     );\r\n}\r\n \r\nexport default Contacts;","E:\\Tutorials\\React_App\\firebase_crud\\src\\components\\ContactForm.js",["35","36","37"],"E:\\Tutorials\\React_App\\firebase_crud\\src\\firebase.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":8,"nodeType":"44","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"47","line":22,"column":21,"nodeType":"48","messageId":"49","endLine":22,"endColumn":23},{"ruleId":"50","severity":1,"message":"51","line":100,"column":45,"nodeType":"52","endLine":100,"endColumn":110},{"ruleId":"50","severity":1,"message":"51","line":103,"column":45,"nodeType":"52","endLine":103,"endColumn":105},{"ruleId":"46","severity":1,"message":"47","line":16,"column":24,"nodeType":"48","messageId":"49","endLine":16,"endColumn":26},{"ruleId":"53","severity":1,"message":"54","line":24,"column":3,"nodeType":"55","endLine":24,"endColumn":41,"suggestions":"56"},{"ruleId":"46","severity":1,"message":"47","line":81,"column":60,"nodeType":"48","messageId":"49","endLine":81,"endColumn":62},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialFieldValues'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [props.currentId, props.contactObjects, initialFieldValues]",{"range":"62","text":"63"},[439,477],"[props.currentId, props.contactObjects, initialFieldValues]"]